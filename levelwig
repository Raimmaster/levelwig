#!/usr/bin/env python3

import datetime
import functools
import getpass
from os import path
import re
import sys

import cleancss
from pigwig import PigWig, Response
from pigwig.exceptions import HTTPException

import db
import gen

levelwig_dir = path.normpath(path.dirname(path.abspath(__file__)))
template_dir = path.join(levelwig_dir, 'templates')
css_dir = path.join(levelwig_dir, 'css')

LOGIN_TIME = datetime.timedelta(days=30)

def routes():
	return [
		('GET', '/', root),
		('GET', '/post/<id>', post),
		('GET', '/post/<id>/<slug>', post),
		('GET', '/css/<path:relpath>', css),
		('GET', '/admin/login', login_form),
		('POST', '/admin/login', login),
		('GET', '/admin/logout', logout),
		('GET', '/admin', admin_root),
		('POST', '/admin/post', admin_post),
		('GET', '/admin/post/<id>/edit', admin_post_edit_form),
		('POST', '/admin/post/<id>/edit', admin_post_edit),
		('POST', '/admin/post/<id>/draft', admin_post_draft),
		('GET', '/admin/post/<id>/delete', admin_post_delete_form),
		('POST', '/admin/post/<id>/delete', admin_post_delete),
	]

def root(request):
	posts = db.iter_posts(allowed_flags=0)
	return Response.render(request, 'root.jinja2', {'posts': posts})

def post(request, id, slug=None):
	post = db.get_post(id, allowed_flags=db.PostFlag.draft)
	if post is None:
		raise HTTPException(404, 'invalid post id')
	return Response.render(request, 'post.jinja2', {'post': post})

def css(request, relpath):
	root, _ = path.splitext(relpath)
	ccss_path = path.join(css_dir, root) + '.ccss'
	with open(ccss_path, 'r') as f:
		return Response(cleancss.convert(f), content_type='text/css')

def login_form(request):
	return Response.render(request, 'login.jinja2', {})

def login(request):
	try:
		username = request.body['username']
		password = request.body['password']
	except KeyError:
		raise HTTPException(400, 'username or password missing')
	if db.check_login(username, password):
		response = Response(code=303, location='/admin')
		response.set_secure_cookie(request, 'username', username, max_age=LOGIN_TIME)
		return response
	else:
		raise HTTPException(401, 'incorrect username or password')

def logout(request):
	response = Response(code=303, location='/')
	response.set_cookie('username', '', max_age=datetime.timedelta(seconds=-1))
	return response

def authed(f):
	@functools.wraps(f)
	def wrapper(request, **kwargs):
		username = request.get_secure_cookie('username', LOGIN_TIME)
		if not username:
			return Response(code=303, location='/admin/login')
		return f(request, username, **kwargs)
	return wrapper

@authed
def admin_root(request, username):
	posts = db.iter_posts(allowed_flags=db.PostFlag.draft)
	return Response.render(request, 'admin.jinja2', {'posts': posts})

@authed
def admin_post(request, username):
	try:
		title = request.body['title']
		body = request.body['body']
	except KeyError:
		raise HTTPException(400, 'title or body missing')
	db.create_post(username, title, body)
	return Response(code=303, location='/admin')

@authed
def admin_post_edit_form(request, username, id):
	post = db.get_post(id, db.PostFlag.draft)
	return Response.render(request, 'edit.jinja2', {'post': post})

@authed
def admin_post_edit(request, username, id):
	try:
		title = request.body['title']
		body = request.body['body']
	except KeyError:
		raise HTTPException(400, 'title or body missing')
	db.update_post(id, title, body)
	return Response(code=303, location='/admin/post/%s/edit' % id)

@authed
def admin_post_delete_form(request, username, id):
	post = db.get_post(id, db.PostFlag.draft)
	return Response.render(request, 'delete.jinja2', {'post': post})

@authed
def admin_post_delete(request, username, id):
	db.toggle_post_flag(id, db.PostFlag.deleted, True)
	return Response(code=303, location='/admin')

@authed
def admin_post_draft(request, username, id):
	try:
		status = bool(int(request.body['status']))
	except (KeyError, ValueError):
		raise HTTPException(400, 'invalid status')
	db.toggle_post_flag(id, db.PostFlag.draft, status)
	return Response(code=303, location='/admin')

disallowed_chars_re = re.compile('[^\w\s-]')
dash_chars_re = re.compile('[-\s]+')
def slug(title):
	r = disallowed_chars_re.sub('', title)
	return dash_chars_re.sub('-', r)

app = PigWig(routes, template_dir=template_dir, cookie_secret=db.cookie_secret())
app.template_engine.jinja_env.filters['slug'] = slug

def main():
	try:
		mode = sys.argv[1]
	except IndexError:
		print('usage %s [dev|prod|gen]' % sys.argv[0])
		print()
		print('\tdev: auto-reloading wsgiref server')
		print('\tprod: eventlet wsgi server')
		print('\tgen: generate static content into public/')
		print()
		print('on first run, you will be prompted to create a user and password')
		return

	if not db.has_users():
		print('time to create your blogwig user!')
		username = input('username: ')
		password = getpass.getpass('password: ')
		db.create_user(username, password)

	port = 8000
	if len(sys.argv) == 3:
		port = int(sys.argv[2])
	if mode == 'dev':
		app.main(port=port)
	elif mode == 'prod':
		import eventlet, eventlet.wsgi
		eventlet.wsgi.server(eventlet.listen(('localhost', port)), app)
	elif mode == 'gen':
		gen.generate(app)

if __name__ == '__main__':
	main()
